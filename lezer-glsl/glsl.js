import {
  LRLanguage,
  LanguageSupport,
  continuedIndent,
  foldInside,
  foldNodeProp,
  indentNodeProp,
} from '@codemirror/language'
import { parser } from './glsl-parser.js'

export const autocomplete = [
  ...[
    'precision',
    'invariant',
    'layout',
    'shared',
    'precise',
    'subroutine',
    'struct',
    'if',
    'else',
    'switch',
    'case',
    'default',
    'while',
    'do',
    'while',
    'for',
    'continue',
    'break',
    'return',
    'return',
    'discard',
  ].map(label => ({ label, type: 'keyword' })),
  ...[
    'bool',
    'int',
    'uint',
    'atomic_uint',
    'float',
    'double',
    'void',
    'bvec2',
    'bvec3',
    'bvec4',
    'ivec2',
    'ivec3',
    'ivec4',
    'uvec2',
    'uvec3',
    'uvec4',
    'dvec2',
    'dvec3',
    'dvec4',
    'vec2',
    'vec3',
    'vec4',
    'mat2',
    'mat3',
    'mat4',
    'mat2x2',
    'mat3x2',
    'mat4x2',
    'mat2x3',
    'mat3x3',
    'mat4x3',
    'mat2x4',
    'mat3x4',
    'mat4x4',
    'dmat2',
    'dmat3',
    'dmat4',
    'dmat2x2',
    'dmat3x2',
    'dmat4x2',
    'dmat2x3',
    'dmat3x3',
    'dmat4x3',
    'dmat2x4',
    'dmat3x4',
    'dmat4x4',
    'sampler1D',
    'sampler2D',
    'sampler3D',
    'samplerCube',
    'sampler2DRect',
    'sampler1DArray',
    'sampler2DArray',
    'samplerCubeArray',
    'samplerBuffer',
    'sampler2DMS',
    'sampler2DMSArray',
    'isampler1D',
    'isampler2D',
    'isampler3D',
    'isamplerCube',
    'isampler2DRect',
    'isampler1DArray',
    'isampler2DArray',
    'isamplerCubeArray',
    'isamplerBuffer',
    'isampler2DMS',
    'isampler2DMSArray',
    'usampler1D',
    'usampler2D',
    'usampler3D',
    'usamplerCube',
    'usampler2DRect',
    'usampler1DArray',
    'usampler2DArray',
    'usamplerCubeArray',
    'usamplerBuffer',
    'usampler2DMS',
    'usampler2DMSArray',
    'sampler1DShadow',
    'sampler2DShadow',
    'samplerCubeShadow',
    'sampler2DRectShadow',
    'sampler1DArrayShadow',
    'sampler2DArrayShadow',
    'samplerCubeArrayShadow',
    'image1D',
    'image2D',
    'image3D',
    'imageCube',
    'image2DRect',
    'image1DArray',
    'image2DArray',
    'imageCubeArray',
    'imageBuffer',
    'image2DMS',
    'image2DMSArray',
    'iimage1D',
    'iimage2D',
    'iimage3D',
    'iimageCube',
    'iimage2DRect',
    'iimage1DArray',
    'iimage2DArray',
    'iimageCubeArray',
    'iimageBuffer',
    'iimage2DMS',
    'iimage2DMSArray',
    'uimage1D',
    'uimage2D',
    'uimage3D',
    'uimageCube',
    'uimage2DRect',
    'uimage1DArray',
    'uimage2DArray',
    'uimageCubeArray',
    'uimageBuffer',
    'uimage2DMS',
    'uimage2DMSArray',
  ].map(label => ({ label, type: 'type' })),
  ...[
    'const',
    'in',
    'out',
    'inout',
    'centroid',
    'patch',
    'sample',
    'uniform',
    'buffer',
    'shared',
    'coherent',
    'volatile',
    'restrict',
    'readonly',
    'writeonly',
  ].map(label => ({ label, type: 'modifier' })),
  ...['smooth', 'flat', 'noperspective'].map(label => ({
    label,
    type: 'qualifier',
  })),
  ...['highp', 'mediump', 'lowp'].map(label => ({
    label,
    type: 'precision',
  })),
]
export const glslLanguage = LRLanguage.define({
  name: 'glsl',
  parser: parser.configure({
    props: [
      indentNodeProp.add({
        IfStatement: continuedIndent({ except: /^\s*({,else\b)/ }),
        CaseStatement: context => context.baseIndent + context.unit,
        BlockComment: () => null,
        Statement: continuedIndent({ except: /^{/ }),
      }),
      foldNodeProp.add({
        CompoundStatement: foldInside,
        BlockComment(tree) {
          return { from: tree.from + 2, to: tree.to - 2 }
        },
      }),
    ],
  }),
  languageData: {
    commentTokens: { line: '//', block: { open: '/*', close: '*/' } },
    indentOnInput: /^\s*(?:case ,default:,\{,\})$/,
    autocomplete,
  },
})

/// Language support for glsl.
export function glsl() {
  return new LanguageSupport(glslLanguage)
}
